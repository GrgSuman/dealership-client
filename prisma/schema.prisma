// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum VehicleStatus {
  AVAILABLE
  SOLD
  COMING_SOON
}

enum BodyType {
  SEDAN
  SUV
  HATCHBACK
  WAGON
  UTE
  VAN
  COUPE
  CONVERTIBLE
}

enum Transmission {
  MANUAL
  AUTOMATIC
  CVT
  DCT
}

enum FuelType {
  PETROL
  DIESEL
  ELECTRIC
  HYBRID
  PLUGIN_HYBRID
}

enum VehicleCondition {
  NEW
  USED
  CERTIFIED
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id           String       @id @default(cuid())
  email        String       @unique
  name         String?      @db.VarChar(100)
  password     String
  preferences  Preference?
  role         UserRole     @default(USER)
  activities   Activity[]
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

model Activity {
  id        String    @id @default(cuid())
  userId    String
  user      User      @relation(fields: [userId], references: [id])
  action    String    @db.VarChar(50)  // e.g., "viewed", "searched", "compared", "saved"
  carIds    String[]  // one or more car IDs, flexible for all actions
  query     String?   @db.VarChar(255) // search query (if action = "searched")
  timestamp DateTime  @default(now())

  @@index([userId])
  @@index([timestamp])
}

model Preference {
  id             String    @id @default(cuid())
  userId         String    @unique
  user           User      @relation(fields: [userId], references: [id])

  budgetMin      Float?
  budgetMax      Float?
  carTypes       String[]   // ["SUV", "Sedan"]
  fuelTypes      String[]   // ["Petrol", "Electric"]
  brand          String[]   // ["Toyota", "Tesla"]
  features       String[]   // ["Sunroof", "4WD", "Navigation"]
  primarilyUse   String[]   // e.g., "Family trips", "Daily commute", "Off-road"
  topPriorities  String[]   // e.g., ["Fuel efficiency", "Safety", "Performance"]

  updatedAt      DateTime   @updatedAt
}

model Vehicle {
  id               String    @id @default(cuid())
  make             String    @db.VarChar(100)
  model            String    @db.VarChar(100)
  year             Int
  price            Int       // store in cents
  bodyType         BodyType
  transmission     Transmission
  fuelType         FuelType
  fuelConsumptionUrban       Float?
  fuelConsumptionExtraUrban  Float?
  fuelConsumptionCombined    Float?
  engineCapacity   Float?
  cylinders        Int?
  odometer        Int
  driveType        String?   @db.VarChar(50)
  doors           Int?
  seats           Int?
  color           String?    @db.VarChar(50)
  rego           String?     @db.VarChar(20)
  vin            String?     @db.VarChar(17)
  stockNumber     String?    @db.VarChar(50)
  images         String[]
  description     String    @db.Text
  status         VehicleStatus
  condition      VehicleCondition
  features       String[]
  viewsCount    Int          @default(0)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  @@index([make, model])
  @@index([price])
  @@index([status])
  @@index([condition])
  @@index([year])
}
